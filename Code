import yfinance as yf
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import precision_score
import matplotlib.pyplot as plt

# Fetch S&P 500 data
sp500 = yf.Ticker("^GSPC")
sp500 = sp500.history(period="max")
sp500.index = pd.to_datetime(sp500.index)  # Ensure the index is a datetime object

# Plot the closing prices
ax = sp500.plot.line(y="Close", use_index=True)
plt.xlabel('Date')
plt.ylabel('Closing Price')
plt.title('S&P 500 Closing Prices Over 10 Years')
plt.show()

# Data preparation
del sp500["Dividends"]
del sp500["Stock Splits"]

# Create target variable
sp500["Tomorrow"] = sp500["Close"].shift(-1)
sp500["Target"] = (sp500["Tomorrow"] > sp500["Close"]).astype(int)

# Filter data starting from 1990-01-01
sp500 = sp500.loc["1990-01-01":].copy()

# Define the model with class weights to handle imbalance
model = RandomForestClassifier(n_estimators=100, min_samples_split=100, class_weight='balanced', random_state=1)

# Split data into training and testing sets
train = sp500.iloc[:-100]
test = sp500.iloc[-100:]

# Define predictors
predictors = ["Close", "Volume", "Open", "High", "Low"]

# Train the model
model.fit(train[predictors], train["Target"])

# Make predictions
preds = model.predict(test[predictors])
preds = pd.Series(preds, index=test.index)

# Print class distributions
print(f"Target distribution in test set:\n{test['Target'].value_counts()}")
print(f"Prediction distribution:\n{preds.value_counts()}")

# Calculate precision score with zero_division parameter
precision = precision_score(test["Target"], preds, zero_division=1)  # Set zero_division to 1 to avoid warnings
print(f'Precision: {precision}')

# Plot the predictions vs. the actual targets
plt.figure(figsize=(12, 6))
combined = pd.concat([test["Target"], preds], axis=1)
combined.columns = ['Actual', 'Predicted']
combined.plot()
plt.title('S&P 500 Predictions vs. Actual Targets')
plt.xlabel('Date')
plt.ylabel('Value')
plt.show()


# Define functions for backtesting

def predict(train, test, predictors, model):
    model.fit(train[predictors], train["Target"])
    preds_proba = model.predict_proba(test[predictors])[:, 1]
    preds = (preds_proba >= 0.6).astype(int)
    preds = pd.Series(preds, index=test.index, name="Predictions")
    combined = pd.concat([test["Target"], preds], axis=1)
    return combined


def backtest(data, model, predictors, start=2500, step=250):
    all_predictions = []
    for i in range(start, data.shape[0], step):
        train = data.iloc[0:i].copy()
        test = data.iloc[i:(i + step)].copy()
        predictions = predict(train, test, predictors, model)
        all_predictions.append(predictions)
    return pd.concat(all_predictions)


# Define new predictors
new_predictors = []
horizons = [2, 5, 60, 250, 1000]
for horizon in horizons:
    rolling_averages = sp500.rolling(horizon).mean()

    ratio_column = f"Close_Ratio_{horizon}"
    sp500[ratio_column] = sp500["Close"] / rolling_averages["Close"]

    trend_column = f"Trend_{horizon}"
    sp500[trend_column] = sp500.shift(1).rolling(horizon).sum()["Target"]

    new_predictors += [ratio_column, trend_column]

# Drop rows with NaN values
sp500 = sp500.dropna(subset=sp500.columns[sp500.columns != "Tomorrow"])

# Define and train the new model with class weights
model = RandomForestClassifier(n_estimators=200, min_samples_split=50, class_weight='balanced', random_state=1)

# Backtest with new predictors
predictions = backtest(sp500, model, new_predictors)

# Print class distributions
print(f"Backtest Predictions distribution:\n{predictions['Predictions'].value_counts()}")
print(f"Backtest Targets distribution:\n{predictions['Target'].value_counts()}")

# Calculate precision score with zero_division parameter
precision = precision_score(predictions["Target"], predictions["Predictions"], zero_division=1)
print(f'Backtest Precision Score: {precision}')

# Plot backtest predictions
plt.figure(figsize=(12, 6))
predictions["Predictions"].value_counts().plot(kind='bar')
plt.title('Distribution of Predictions in Backtest')
plt.xlabel('Prediction Value')
plt.ylabel('Count')
plt.show()

